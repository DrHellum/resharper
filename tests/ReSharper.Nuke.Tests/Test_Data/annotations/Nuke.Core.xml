<?xml version="1.0"?>

<doc>
  <assembly>
    <name>Nuke.Core</name>
  </assembly>
  <members>
    <member name="T:Nuke.Core.BuildServers.AppVeyor">
      <summary>
        Interface according to the <a href="https://www.appveyor.com/docs/environment-variables/">official website</a>.
      </summary>
    </member>
    <member name="T:Nuke.Core.BuildServers.Bitrise">
      <summary>
        Interface according to the
        <a href="http://devcenter.bitrise.io/faq/available-environment-variables/#exposed-by-bitriseio">official website</a>.
      </summary>
    </member>
    <member name="T:Nuke.Core.BuildServers.GitLab">
      <summary>
        Interface according to the <a href="https://docs.gitlab.com/ce/ci/variables/README.html">official website</a>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.Ci">
      <summary>
        Mark that job is executed in CI environment.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.CommitRefName">
      <summary>
        The branch or tag name for which project is built.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.CommitrefSlug">
      <summary>
        <c>$CI_COMMIT_REF_NAME</c> lowercased, shortened to 63 bytes, and with everything except <c>0-9</c> and <c>a-z</c> replaced with <c>-</c>. No leading / trailing
        <c>-</c>. Use in URLs, host names and domain names.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.CommitSha">
      <summary>
        The commit revision for which project is built.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.CommitTag">
      <summary>
        The commit tag name. Present only when building tags.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ConfigPath">
      <summary>
        The path to CI config file. Defaults to <c>.gitlab-ci.yml</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.DebugTrace">
      <summary>
        Whether <a href="https://docs.gitlab.com/ce/ci/variables/README.html#debug-tracing">debug tracing</a> is enabled.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.DisposableEnvironment">
      <summary>
        Marks that the job is executed in a disposable environment (something that is created only for this job and disposed of/destroyed after the execution - all executors except
        <c>shell</c> and <c>ssh</c>). If the environment is disposable, it is set to true, otherwise it is not defined at all.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.EnvironmentName">
      <summary>
        The name of the environment for this job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.EnvironmentSlug">
      <summary>
        A simplified version of the environment name, suitable for inclusion in DNS, URLs, Kubernetes labels, etc.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.EnvironmentUrl">
      <summary>
        The URL of the environment for this job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.JobId">
      <summary>
        The unique id of the current job that GitLab CI uses internally.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.JobManual">
      <summary>
        The flag to indicate that job was manually started.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.JobName">
      <summary>
        The name of the job as defined in <c>.gitlab-ci.yml</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.JobStage">
      <summary>
        The name of the stage as defined in <c>.gitlab-ci.yml</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.JobToken">
      <summary>
        Token used for authenticating with the GitLab Container Registry.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RepositoryUrl">
      <summary>
        The URL to clone the Git repository.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RunnerDescription">
      <summary>
        The description of the runner as saved in GitLab.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RunnerId">
      <summary>
        The unique id of runner being used.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RunnerTags">
      <summary>
        The defined runner tags.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.PipelineId">
      <summary>
        The unique id of the current pipeline that GitLab CI uses internally.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.PipelineTriggered">
      <summary>
        The flag to indicate that job was <a href="https://docs.gitlab.com/ce/ci/triggers/README.html">triggered</a>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.PipelineSource">
      <summary>
        The source for this pipeline, one of: push, web, trigger, schedule, api, external. Pipelines created before 9.5 will have unknown as source.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectDir">
      <summary>
        The full path where the repository is cloned and where the job is run.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectId">
      <summary>
        The unique id of the current project that GitLab CI uses internally.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectName">
      <summary>
        The project name that is currently being built (actually it is project folder name).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectNamespace">
      <summary>
        The project namespace (username or groupname) that is currently being built.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectPath">
      <summary>
        The namespace with project name.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectPathSlug">
      <summary>
        <c>$CI_PROJECT_PATH</c> lowercased and with everything except <c>0-9</c> and <c>a-z</c> replaced with <c>-</c>. Use in URLs and domain names.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectUrl">
      <summary>
        The HTTP address to access project.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ProjectVisibility">
      <summary>
        The project visibility (internal, private, public).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.Registry">
      <summary>
        If the Container Registry is enabled it returns the address of GitLab's Container Registry.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RegistryImage">
      <summary>
        If the Container Registry is enabled for the project it returns the address of the registry tied to the specific project.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RegistryPassword">
      <summary>
        The password to use to push containers to the GitLab Container Registry.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RegistryUser">
      <summary>
        The username to use to push containers to the GitLab Container Registry.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.Server">
      <summary>
        Mark that job is executed in CI environment.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ServerName">
      <summary>
        The name of CI server that is used to coordinate jobs.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ServerRevision">
      <summary>
        GitLab revision that is used to schedule jobs.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ServerVersion">
      <summary>
        GitLab version that is used to schedule jobs.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.SharedEnvironment">
      <summary>
        Marks that the job is executed in a shared environment (something that is persisted across CI invocations like <c>shell</c> or <c>ssh</c>
        executor). If the environment is shared, it is set to true, otherwise it is not defined at all.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.ArtifactDownloadAttempts">
      <summary>
        Number of attempts to download artifacts running a job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.GetSourcesAttempts">
      <summary>
        Number of attempts to fetch sources running a job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.GitLabCi">
      <summary>
        Mark that job is executed in GitLab CI environment.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.GitLabUserId">
      <summary>
        The id of the user who started the job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.GitLabUserEmail">
      <summary>
        The email of the user who started the job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.GitLabUserLogin">
      <summary>
        The login username of the user who started the job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.GitLabUserName">
      <summary>
        The real name of the user who started the job.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.GitLab.RestoreCacheAttempts">
      <summary>
        Number of attempts to restore the cache running a job.
      </summary>
    </member>
    <member name="T:Nuke.Core.BuildServers.Jenkins">
      <summary>
        Interface according to the <a href="https://wiki.jenkins.io/display/JENKINS/Building+a+software+project">official website</a>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.BuilDisplayName">
      <summary>
        The current build display name, such as "#14".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.BuildNumber">
      <summary>
        The current build number, such as "14".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.BuildTag">
      <summary>
        The current build tag, such as "jenkins-nuke-14".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.ExecutorNumber">
      <summary>
        The number of the executor this build is running on, Equals '0' for first executor.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.GitBranch">
      <summary>
        For Git-based projects, this variable contains the Git branch that was checked out for the build (normally origin/master)  (all the Git* properties require git plugin).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.GitCommit">
      <summary>
        For Git-based projects, this variable contains the Git hash of the commit checked out for the build (like ce9a3c1404e8c91be604088670e93434c4253f03) ﻿(all the Git* properties require git plugin).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.GitPreviousCommit">
      <summary>
        For Git-based projects, this variable contains the Git hash of the previous build commit (like ce9a3c1404e8c91be604088670e93434c4253f03) ﻿(all the Git* properties require git plugin).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.GitPreviousSuccessfulCommit">
      <summary>
        For Git-based projects, this variable contains the Git hash of the last successful build (like ce9a3c1404e8c91be604088670e93434c4253f03) ﻿(all the Git* properties require git plugin).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.GitUrl">
      <summary>
        For Git-based projects, this variable contains the Git url (like git@github.com:user/repo.git or [https://github.com/user/repo.git])  (all the Git* properties require git plugin).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.JenkinsHome">
      <summary>
        The path to the jenkins home directory.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.JenkinsServerCookie">
      <summary>
        The jenkins server cookie.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.JobBaseName">
      <summary>
        The base name of the current job, such as "Nuke".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.JobDisplayUrl">
      <summary>
        The url to the currents job overview.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.JobName">
      <summary>
        The  name of the current job, such as "Nuke".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.NodeLabels">
      <summary>
        The  labels of the node this build is running on, such as "win64 msbuild".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.NodeName">
      <summary>
        The name of the node this build is running on, such as "master".
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.RunChangesDisplayUrl">
      <summary>
        The url to the currents run changes page.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.RunDisplayUrl">
      <summary>
        The url to the currents run overview page.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Jenkins.Workspace">
      <summary>
        The path to the folder this job is running in.
      </summary>
    </member>
    <member name="T:Nuke.Core.BuildServers.TeamCity">
      <summary>
        Interface according to the
        <a href="https://confluence.jetbrains.com/display/TCDL/Build+Script+Interaction+with+TeamCity">official website</a>.
      </summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.junit">
      <summary>JUnit Ant task XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.surefire">
      <summary>Maven Surefire XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.nunit">
      <summary>NUnit-Console XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.mstest">
      <summary>MSTest XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.vstest">
      <summary>VSTest XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.gtest">
      <summary>Google Test XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.checkstyle">
      <summary>Checkstyle inspections XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.findBugs">
      <summary>FindBugs inspections XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.jslint">
      <summary>JSLint XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.ReSharperInspectCode">
      <summary>ReSharper inspectCode.exe XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.FxCop">
      <summary>FxCop inspection XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.pmd">
      <summary>PMD inspections XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.pmdCpd">
      <summary>PMD Copy/Paste Detector (CPD) XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.DotNetDupFinder">
      <summary>ReSharper dupfinder.exe XML reports</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamCityImportType.dotNetCoverage">
      <summary>XML reports generated by dotcover, partcover, ncover or ncover3)</summary>
    </member>
    <member name="T:Nuke.Core.BuildServers.TeamServices">
      <summary>
        Interface according to the <a href="https://www.visualstudio.com/en-us/docs/build/define/variables">official website</a>.
      </summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.Manual">
      <summary>A user manually queued the build.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.IndividualCI">
      <summary><b>Continuous integration (CI)</b> triggered by a Git push or a TFVC check-in.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.BatchedCI">
      <summary><b>Continuous integration (CI)</b> triggered by a Git push or a TFVC check-in, and the <b>Batch changes</b> was selected.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.Schedule">
      <summary><b>Scheduled</b> trigger.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.ValidateShelveset">
      <summary>A user manually queued the build of a specific TFVC shelveset.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.CheckInShelveset">
      <summary><b>Gated check-in</b> trigger.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesBuildReason.PullRequest">
      <summary>The build was triggered by a Git branch policy that requires a build.</summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesRepositoryType.TfsGit">
      <summary>
        <a href="https://docs.microsoft.com/en-us/vsts/git/overview">TFS Git repository</a>.
      </summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesRepositoryType.TfsVersionControl">
      <summary>
        <a href="https://docs.microsoft.com/en-us/vsts/tfvc/overview">Team Foundation Version Control</a>.
      </summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesRepositoryType.Git">
      <summary>
        Git repository hosted on an external server.
      </summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesRepositoryType.GitHub">
      <summary>
        Git repository hosted on GitHub.
      </summary>
    </member>
    <member name="F:Nuke.Core.BuildServers.TeamServicesRepositoryType.Svn">
      <summary>
        Subversion.
      </summary>
    </member>
    <member name="T:Nuke.Core.BuildServers.Travis">
      <summary>
        Interface according to the <a href="https://docs.travis-ci.com/user/environment-variables/">official website</a>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.SecureEnvVars">
      <summary>
        Whether you have defined any encrypted variables, including variables defined in the Repository Settings.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.AllowFailure">
      <summary>
        Set to <c>true</c> if the job is allowed to fail otherwhise <c>false</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.Branch">
      <summary>
        For push builds, or builds not triggered by a pull request, this is the name of the branch.
        For builds triggered by a pull request this is the name of the branch targeted by the pull request.
        For builds triggered by a tag, this is the same as the name of the tag (<c>TRAVIS_TAG</c>).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.BuildDir">
      <summary>
        The absolute path to the directory where the repository being built has been copied on the worker.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.BuildId">
      <summary>
        The id of the current build that Travis CI uses internally.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.BuildNumber">
      <summary>
        The number of the current build (for example, “4”).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.Commit">
      <summary>
        The commit that the current build is testing.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.CommitMessage">
      <summary>
        The commit subject and body, unwrapped.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.CommitRange">
      <summary>
        The range of commits that were included in the push or pull request. (Note that this is empty for builds triggered by the initial commit of a new branch.)
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.EventType">
      <summary>
        Indicates how the build was triggered.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.JobId">
      <summary>
        The id of the current job that Travis CI uses internally.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.JobNumber">
      <summary>
        The number of the current job (for example, “4.1”).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.OsName">
      <summary>
        On multi-OS builds, this value indicates the platform the job is running on. Values are <c>linux</c> and <c>osx</c> currently, to be extended in the future.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.PullRequest">
      <summary>
        <c>TRAVIS_PULL_REQUEST</c> is set to the pull request number if the current job is a pull request build, or <c>false</c> if it’s not.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.PullRequestBranch">
      <summary>
        If the current job is a pull request, the name of the branch from which the PR originated.
        If the current job is a push build, this variable is empty(<c>""</c>).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.PullRequestSha">
      <summary>
        If the current job is a pull request, the commit SHA of the HEAD commit of the PR.
        If the current job is a push build, this variable is empty(<c>""</c>).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.PullRequestSlug">
      <summary>
        If the current job is a pull request, the slug (in the form <c>owner_name/repo_name</c>) of the repository from which the PR originated.
        If the current job is a push build, this variable is empty(<c>""</c>).
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.RepoSlug">
      <summary>
        The slug (in form: <c>owner_name/repo_name</c>) of the repository currently being built.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.Sudo">
      <summary>
        <c>true</c> or <c>false</c> based on whether sudo is enabled.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.TestResult">
      <summary>
        Is set to <em>0</em> if the build is successful and <em>1</em> if the build is broken.
      </summary>
    </member>
    <member name="P:Nuke.Core.BuildServers.Travis.Tag">
      <summary>
        If the current build is for a git tag, this variable is set to the tag’s name.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.Fail(System.String,System.Object[])">
      <summary>
        Logs a message as failure. Halts execution.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.Fail(System.Object)">
      <summary>
        Logs a message as failure. Halts execution.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.Fail(System.String)">
      <summary>
        Logs a message as failure. Halts execution.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.AssertWarn(System.Boolean,System.String)">
      <summary>
        Asserts a condition to be true, calling <see cref="M:Nuke.Core.Logger.Warn(System.String)" /> otherwise.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.Assert(System.Boolean,System.String)">
      <summary>
        Asserts a condition to be true, halts otherwise.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.NotNull``1(``0,System.String)">
      <summary>
        Asserts an object to be not null, halts otherwise.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.NotNullWarn``1(``0,System.String)">
      <summary>
        Checks an object to be not null, calling <see cref="M:Nuke.Core.Logger.Warn(System.String)" /> otherwise.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.NotEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Asserts a collection to be not empty, halts otherwise.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.NoNullItems``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
        Asserts a collection to contain only <em>non-null</em> elements, halts otherwise.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.SuppressErrors(System.Action)">
      <summary>
        Executes a given action and suppresses all errors while delegating them to <see cref="M:Nuke.Core.Logger.Warn(System.String)" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.SuppressErrors``1(System.Func{``0},``0)">
      <summary>
        Executes a given action and suppresses all errors while delegating them to <see cref="M:Nuke.Core.Logger.Warn(System.String)" />.
      </summary>
      <example>
        <code>
          var author = SuppressErrors(GetAuthor, defaultValue: "John Doe");
        </code>
      </example>
    </member>
    <member name="M:Nuke.Core.ControlFlow.SuppressErrors``1(System.Func{System.Collections.Generic.IEnumerable{``0}})">
      <summary>
        Executes a given action and suppresses all errors while delegating them to <see cref="M:Nuke.Core.Logger.Warn(System.String)" />.
      </summary>
      <returns>
        Returns an empty collection for convenience.
      </returns>
      <example>
        <code>
          // Won't throw NRE if GetAuthors throws
          var authorsCount = SuppressErrors(GetAuthors).Length;
        </code>
      </example>
    </member>
    <member name="M:Nuke.Core.ControlFlow.SuppressErrorsIf``1(System.Boolean,System.Func{``0},``0)">
      <summary>
        Executes a given action and suppresses all errors while delegating them to <see cref="M:Nuke.Core.Logger.Warn(System.String)" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.ControlFlow.ExecuteWithRetry(System.Action,System.Action,System.Int32,System.Int32)">
      <summary>
        Executes a given action under retry-policy. After reaching the specified amount of attempts, the actions fails permanently.
      </summary>
      <example>
        <code>
          ExecuteWithRetry(() => NuGetRestore(SolutionFile), waitInSeconds: 30);
        </code>
      </example>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.BuildAssembly">
      <summary>
        The build entry assembly.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.ParameterSwitch(System.String)">
      <summary>
        Provides access to a command-line argument or environment variable switch.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.Parameter(System.String)">
      <summary>
        Provides access to a command-line argument or environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.Parameter``1(System.String)">
      <summary>
        Provides access to a converted command-line argument or environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.ParameterSet``1(System.String,System.Nullable{System.Char})">
      <summary>
        Provides access to a command-line argument or environment variable set.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureParameter(System.String)">
      <summary>
        Provides ensured access to a command-line argument or environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureParameter``1(System.String)">
      <summary>
        Provides ensured access to a converted command-line argument or environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureParameterSet``1(System.String,System.Nullable{System.Char})">
      <summary>
        Provides ensured access to a command-line argument or environment variable set.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.VariableSwitch(System.String)">
      <summary>
        Provides access to an environment variable switch.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.Variable(System.String)">
      <summary>
        Provides access to an environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.Variable``1(System.String)">
      <summary>
        Provides access to a converted environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.VariableSet``1(System.String,System.Nullable{System.Char})">
      <summary>
        Provides access to an environment variable set.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureVariable(System.String)">
      <summary>
        Provides ensured access to an environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureVariable``1(System.String)">
      <summary>
        Provides ensured access to a converted environment variable.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureVariableSet``1(System.String,System.Nullable{System.Char})">
      <summary>
        Provides ensured access to an environment variable set.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.ArgumentSwitch(System.String)">
      <summary>
        Provides access to a command-line argument switch.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.Argument(System.String)">
      <summary>
        Provides access to a command-line argument.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.Argument``1(System.String)">
      <summary>
        Provides access to a converted command-line argument.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.ArgumentSet``1(System.String,System.Nullable{System.Char})">
      <summary>
        Provides access to a command-line argument set.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureArgument(System.String)">
      <summary>
        Provides ensured access to a command-line argument.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureArgument``1(System.String)">
      <summary>
        Provides ensured access to a converted command-line argument.
      </summary>
    </member>
    <member name="M:Nuke.Core.EnvironmentInfo.EnsureArgumentSet``1(System.String,System.Nullable{System.Char})">
      <summary>
        Provides ensured access to a command-line argument set.
      </summary>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.Is64Bit">
      <summary>
        Returns whether the operating system is x64 or not.
      </summary>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.Is32Bit">
      <summary>
        Returns whether the operating system is x86 or not.
      </summary>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.IsUnix">
      <summary>
        Returns whether the operating system is a UNIX system.
      </summary>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.IsWin">
      <summary>
        Returns whether the operating system is a Windows system.
      </summary>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.Framework">
      <summary>
        Returns the framework the build is running on.
      </summary>
    </member>
    <member name="P:Nuke.Core.EnvironmentInfo.Platform">
      <summary>
        Returns the platform the build is running on.
      </summary>
    </member>
    <member name="T:Nuke.Core.Execution.InjectionAttributeBase">
      <summary>
        Value injection is executed prior to build execution. Fields marked
        with the attribute can be declared as <em>requirement</em> for any <see cref="T:Nuke.Core.Target" />
        definitions using <see cref="M:Nuke.Core.ITargetDefinition.Requires(System.Linq.Expressions.Expression{System.Func{System.Boolean}}[])" />,
        <see cref="M:Nuke.Core.ITargetDefinition.Requires``1(System.Linq.Expressions.Expression{System.Func{``0}}[])" />, or
        <see cref="M:Nuke.Core.ITargetDefinition.Requires``1(System.Linq.Expressions.Expression{System.Func{System.Nullable{``0}}}[])" />
        and will therefore be subject for validation at execution start.
      </summary>
    </member>
    <member name="T:Nuke.Core.Execution.StaticInjectionAttributeBase">
      <inheritdoc />
    </member>
    <member
      name="M:Nuke.Core.Execution.StronglyConnectedComponentFinder`1.DetectCycle(System.Collections.Generic.IEnumerable{Nuke.Core.Execution.Vertex{`0}})">
      <summary>
        Calculates the sets of strongly connected vertices.
      </summary>
      <param name="graph">Graph to detect cycles within.</param>
      <returns>Set of strongly connected components (sets of vertices)</returns>
    </member>
    <member name="M:Nuke.Core.IO.FileSystemTasks.GetLastWriteTimeUtc(System.String)">
      <summary>
        Returns the time the file or directory was last written to. For directories, the latest time for the whole content is returned.
      </summary>
    </member>
    <member name="T:Nuke.Core.IO.PathConstruction">
      <summary>
        <p>
          Provides an abstraction for generating Windows/Unix/UNC-compliant
          file-system paths independently of the underlying operating system. Usages should be restricted to the moment
          of construction, i.e., avoid using it as part of an API.
        </p>
        <p>
          Casting a string with <c>(RelativePath)</c> will construct any intermediate part of a path using the specific separators
          for the currently running operating-system. By using <c>(WinRelativePath)</c> and <c>(UnixRelativePath)</c> other separators can be
          used intentionally. Casting with <c>(AbsolutePath)</c> ensures that the path is rooted as Windows/Unix/UNC-path. The operators
          <c>/</c> and <c>+</c> allow to append sub-directories.
        </p>
        <p>Resulting paths are automatically normalized if possible. So <c>C:\foo\..\bar\.</c> will become <c>C:\bar</c>.</p>
      </summary>
      <example>
        <code>
          string relativePath = (RelativePath) "foo" / "bar";
          // On Windows:   relativePath == "foo\bar"
          // On Unix:      relativePath == "foo/bar"
        </code>
        <code>
          string winPath = (WinPath) "foo" / "bar"; // "foo\bar";
          string unixPath = (UnixPath) "foo" / "bar";   // "foo/bar";
        </code>
        <code>
          string absolutePath1 = (AbsolutePath) RootDirectory / "foo" / "bar";
          string absolutePath2 = (AbsolutePath) "foo" / "bar"  // Throws exception
        </code>
      </example>
    </member>
    <member name="T:Nuke.Core.ITargetDefinition">
      <summary>
        Public API for defining targets.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.Description(System.String)">
      <summary>
        Adds a description for this target.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.Executes(System.Action[])">
      <summary>
        Adds a set of actions that will be executed for this target.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.Executes``1(System.Func{``0})">
      <summary>
        Adds a set of actions that will be executed for this target.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.DependsOn(Nuke.Core.Target[])">
      <summary>
        Adds a set of dependent targets that will be executed before this target.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.DependsOn(System.String[])">
      <summary>
        Adds a set of dependent shadow targets that will be executed before this target.
        Non-existent shadow targets will automatically being skipped.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.OnlyWhen(System.Func{System.Boolean}[])">
      <summary>
        Adds a set of conditions that will be checked before executing this target.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.Requires``1(System.Linq.Expressions.Expression{System.Func{``0}}[])">
      <summary>
        Adds a required parameter that will be checked prior to build execution.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.Requires``1(System.Linq.Expressions.Expression{System.Func{System.Nullable{``0}}}[])">
      <summary>
        Adds a required parameter that will be checked prior to build execution.
      </summary>
    </member>
    <member name="M:Nuke.Core.ITargetDefinition.Requires(System.Linq.Expressions.Expression{System.Func{System.Boolean}}[])">
      <summary>
        Adds a requirement that will be checked prior to build execution.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Block(System.String)">
      <summary>
        Provides a logging block for better readability. The actual output is dependent on the executing environment.
        <ul>
          <li><b>Console:</b> logs message with figlet font <em>cybermedium</em></li>
          <li>
            <b>TeamCity:</b> calls <see cref="M:Nuke.Core.BuildServers.TeamCity.OpenBlock(System.String,System.String)" /> and
            <see cref="M:Nuke.Core.BuildServers.TeamCity.CloseBlock(System.String)" />
          </li>
          <li><b>Bitrise:</b> logs message with figlet font <em>ansi-shadow</em></li>
        </ul>
      </summary>
      <returns>
        Returns an <see cref="T:System.IDisposable" /> which will automatically end the block.
      </returns>
    </member>
    <member name="M:Nuke.Core.Logger.Log(System.String,System.Object[])">
      <summary>
        Logs a message unconditionally.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Log(System.Object)">
      <summary>
        Logs a message unconditionally.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Log(System.String)">
      <summary>
        Logs a message unconditionally.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Log``1(``0,System.Func{``0,System.String})">
      <summary>
        Logs a message unconditionally.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Trace(System.String,System.Object[])">
      <summary>
        Logs a message as trace if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Trace" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Trace(System.Object)">
      <summary>
        Logs a message as trace if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Trace" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Trace(System.String)">
      <summary>
        Logs a message as trace if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Trace" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Trace``1(``0,System.Func{``0,System.String})">
      <summary>
        Logs a message as trace if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Trace" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Info(System.String,System.Object[])">
      <summary>
        Logs a message as information if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to
        <see cref="F:Nuke.Core.LogLevel.Information" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Info(System.Object)">
      <summary>
        Logs a message as information if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to
        <see cref="F:Nuke.Core.LogLevel.Information" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Info(System.String)">
      <summary>
        Logs a message as information if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to
        <see cref="F:Nuke.Core.LogLevel.Information" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Info``1(``0,System.Func{``0,System.String})">
      <summary>
        Logs a message as information if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to
        <see cref="F:Nuke.Core.LogLevel.Information" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Warn(System.String,System.Object[])">
      <summary>
        Logs a message as warning if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Warning" />
        .
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Warn(System.Object)">
      <summary>
        Logs a message as warning if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Warning" />
        .
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Warn(System.String)">
      <summary>
        Logs a message as warning if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Warning" />
        .
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Warn``1(``0,System.Func{``0,System.String})">
      <summary>
        Logs a message as warning if <see cref="P:Nuke.Core.NukeBuild.LogLevel" /> is greater or equal to <see cref="F:Nuke.Core.LogLevel.Warning" />
        .
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Error(System.String,System.Object[])">
      <summary>
        Logs a message as error.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Error(System.Object)">
      <summary>
        Logs a message as error.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Error(System.String)">
      <summary>
        Logs a message as error.
      </summary>
    </member>
    <member name="M:Nuke.Core.Logger.Error``1(``0,System.Func{``0,System.String})">
      <summary>
        Logs a message as error.
      </summary>
    </member>
    <member name="T:Nuke.Core.NukeBuild">
      <summary>
        Base class for build definitions. Derived types must declare <c>static int Main</c> which calls
        <see cref="M:Nuke.Core.NukeBuild.Execute``1(System.Linq.Expressions.Expression{System.Func{``0,Nuke.Core.Target}})" /> for the exit code.
      </summary>
      <example>
        <code>
          class DefaultBuild : NukeBuild
          {
          public static int Main () => Execute&lt;DefaultBuild&gt;(x => x.Compile);

          Target Clean =&gt; _ =&gt; _
          .Executes(() =&gt; EnsureCleanDirectory(OutputDirectory));

          Target Compile =&gt; _ =&gt; _
          .DependsOn(Clean)
          .Executes(() =&gt; MSBuild(SolutionFile);
          }
        </code>
      </example>
    </member>
    <member name="P:Nuke.Core.NukeBuild.Instance">
      <summary>
        Currently running build instance.
      </summary>
    </member>
    <member name="M:Nuke.Core.NukeBuild.Execute``1(System.Linq.Expressions.Expression{System.Func{``0,Nuke.Core.Target}})">
      <summary>
        Executes the build. The provided expression defines the <em>default</em> target that is invoked,
        if no targets have been specified via command-line arguments.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.Verbosity">
      <summary>
        Logging verbosity while building. Default is <see cref="F:Nuke.Core.Verbosity.Normal" />.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.Host">
      <summary>
        Host for execution. Default is <em>automatic</em>.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.Configuration">
      <summary>
        Configuration to build. Default is <em>Debug</em> (local) or <em>Release</em> (server).
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.SkippedTargets">
      <summary>
        Disables execution of target dependencies.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.NoInitialization">
      <summary>
        Disables bootstrapper initialization.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.CheckPath">
      <summary>
        Enables sanity checks for the <c>PATH</c> environment variable.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.Graph">
      <summary>
        Shows the target dependency graph (HTML).
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.Help">
      <summary>
        Shows the help text for this build assembly.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.RootDirectory">
      <summary>
        Gets the full path to the root directory where the <c>.nuke</c> file is located.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.SolutionFile">
      <summary>
        Full path to the solution file that is referenced in the <c>.nuke</c> file.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.SolutionDirectory">
      <summary>
        Full path to the solution directory derived the <c>.nuke</c> file.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.TemporaryDirectory">
      <summary>
        Full path to <c>/.tmp</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.OutputDirectory">
      <summary>
        Full path to <c>/output</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.ArtifactsDirectory">
      <summary>
        Full path to <c>/artifacts</c>.
      </summary>
    </member>
    <member name="P:Nuke.Core.NukeBuild.SourceDirectory">
      <summary>
        Full path to either <c>/src</c> or <c>/source</c>. Throws an exception if either none or both exist.
      </summary>
    </member>
    <member name="T:Nuke.Core.ParameterAttribute">
      <inheritdoc />
      <summary>
        Injected parameters are resolved case-insensitively in the following order:
        <ul>
          <li>From command-line arguments (e.g., <c>-arg value</c>)</li>
          <li>From environment variables (e.g., <c>Arg=value</c>)</li>
        </ul>
        <para />
        For value-types, there is a distinction between pure value-types, and their <em>nullable</em>
        counterparts. For instance, <c>int</c> will have its default value <c>0</c> even when it's not
        supplied via command-line or environment variable.
        <para />
        <inheritdoc />
      </summary>
      <example>
        <code>
          [Parameter("MyGet API key for private feed."] string MyGetApiKey;
          Target Push => _ => _
          .Requires(() => MyGetApiKey)
          .Executes() => { /* ... */ });
        </code>
      </example>
    </member>
    <member name="T:Nuke.Core.Target">
      <summary>
        Defines a target.
      </summary>
      <example>
        <code>
          Target Restore => _ => _
          .DependsOn(/* dependent target */)
          .OnlyWhen(/* conditions for executing the target */)
          .Executes(() => /* actions to be executed */);
        </code>
      </example>
    </member>
    <member name="T:Nuke.Core.Tooling.IProcess">
      <summary>
        Abstraction for <see cref="T:System.Diagnostics.Process" />.
      </summary>
    </member>
    <member name="P:Nuke.Core.Tooling.IProcess.FileName">
      <summary>
        Returns the invoked file name.
      </summary>
    </member>
    <member name="P:Nuke.Core.Tooling.IProcess.Arguments">
      <summary>
        Returns the arguments with filtered secrets.
      </summary>
    </member>
    <member name="P:Nuke.Core.Tooling.IProcess.WorkingDirectory">
      <summary>
        Returns the working directory.
      </summary>
    </member>
    <member name="P:Nuke.Core.Tooling.IProcess.Output">
      <summary>
        Contains the output of the process execution.
      </summary>
    </member>
    <member name="P:Nuke.Core.Tooling.IProcess.ExitCode">
      <summary>
        Returns <see cref="P:System.Diagnostics.Process.ExitCode" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.IProcess.Kill">
      <summary>
        Calls <see cref="M:System.Diagnostics.Process.Kill" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.IProcess.WaitForExit">
      <summary>
        Waits for the process to exit. The timeout is provided via
        <see
          cref="M:Nuke.Core.Tooling.ProcessTasks.StartProcess(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Int32},System.Boolean,System.Func{System.String,System.String})" />
        or <see cref="T:Nuke.Core.Tooling.ToolSettings" />.
        If the process is not exiting within a given timeout, <see cref="M:Nuke.Core.Tooling.IProcess.Kill" /> is called.
      </summary>
      <returns>
        Returns <c>true</c>, if the process exited on its own.
      </returns>
    </member>
    <member name="T:Nuke.Core.Tooling.ISettingsEntity">
      <summary>
        Marker interface for settings entities.
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ProcessSettingsExtensions.SetExecutionTimeout(Nuke.Core.Tooling.ProcessSettings,System.Nullable{System.Int32})">
      <summary>
        Sets <see cref="P:Nuke.Core.Tooling.ProcessSettings.ExecutionTimeout" /> --
        <inheritdoc cref="P:Nuke.Core.Tooling.ProcessSettings.ExecutionTimeout" />
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ProcessSettingsExtensions.SetRedirectOutput(Nuke.Core.Tooling.ProcessSettings,System.Boolean)">
      <summary>
        Sets <see cref="P:Nuke.Core.Tooling.ProcessSettings.RedirectOutput" /> --
        <inheritdoc cref="P:Nuke.Core.Tooling.ProcessSettings.RedirectOutput" />
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ProcessSettingsExtensions.EnableRedirectOutput(Nuke.Core.Tooling.ProcessSettings)">
      <summary>
        Enables <see cref="P:Nuke.Core.Tooling.ProcessSettings.RedirectOutput" /> --
        <inheritdoc cref="P:Nuke.Core.Tooling.ProcessSettings.RedirectOutput" />
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ProcessSettingsExtensions.DisableRedirectOutput(Nuke.Core.Tooling.ProcessSettings)">
      <summary>
        Disables <see cref="P:Nuke.Core.Tooling.ProcessSettings.RedirectOutput" /> --
        <inheritdoc cref="P:Nuke.Core.Tooling.ProcessSettings.RedirectOutput" />
      </summary>
    </member>
    <member
      name="M:Nuke.Core.Tooling.ProcessTasks.StartProcess(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Nullable{System.Int32},System.Boolean,System.Func{System.String,System.String})">
      <summary>
        Starts a process using <see cref="T:System.Diagnostics.Process" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ProcessTasks.StartProcess(Nuke.Core.Tooling.ToolSettings,Nuke.Core.Tooling.ProcessSettings)">
      <summary>
        Starts a process using <see cref="T:System.Diagnostics.Process" />.
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ToolSettingsExtensions.SetToolPath``1(``0,System.String)">
      <summary>
        Sets <see cref="P:Nuke.Core.Tooling.ToolSettings.ToolPath" /> -- <inheritdoc cref="P:Nuke.Core.Tooling.ToolSettings.ToolPath" />
      </summary>
    </member>
    <member name="M:Nuke.Core.Tooling.ToolSettingsExtensions.SetWorkingDirectory``1(``0,System.String)">
      <summary>
        Sets <see cref="P:Nuke.Core.Tooling.ToolSettings.WorkingDirectory" /> --
        <inheritdoc cref="P:Nuke.Core.Tooling.ToolSettings.WorkingDirectory" />
      </summary>
    </member>
    <member
      name="M:Nuke.Core.Tooling.ToolSettingsExtensions.SetArgumentConfigurator``1(``0,System.Func{Nuke.Core.Tooling.Arguments,Nuke.Core.Tooling.Arguments})">
      <summary>
        Sets <see cref="P:Nuke.Core.Tooling.ToolSettings.ArgumentConfigurator" /> --
        <inheritdoc cref="P:Nuke.Core.Tooling.ToolSettings.ArgumentConfigurator" />
      </summary>
    </member>
  </members>
</doc>
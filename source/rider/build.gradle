import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
    repositories {
        maven { url 'https://www.myget.org/F/rd-snapshots/maven/' }
        mavenCentral()
    }

    dependencies { classpath "com.jetbrains.rd:rd-gen:0.1.18" }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.2.50'
    id 'org.jetbrains.intellij' version '0.3.2'
}

apply plugin: 'com.jetbrains.rdgen'

ext.repoRoot = new File("..").canonicalFile
ext.isWindows = Os.isFamily(Os.FAMILY_WINDOWS)
ext.rdLibDirectory = new File(repoRoot, "rider/build/riderRD-2018.2-SNAPSHOT/lib/rd")

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

if (!ext.has("BuildConfiguration"))
    ext.BuildConfiguration = "Debug"

if (ext.has("pluginVersion"))
    ext.version = ext.pluginVersion
else
    ext.version = "1.3.3.7"

if (ext.has("username"))
    intellij.publish.username = ext.username

if (ext.has("password"))
    intellij.publish.password = ext.password

version ext.version

rdgen {
    def modelDir = new File(repoRoot, "rider/protocol/src/main/kotlin/model")
    def csOutput = new File(repoRoot, "resharper/RdNukeProtocol")
    def ktOutput = new File(repoRoot, "rider/src/main/kotlin/com/jetbrains/rider/plugins/nuke/RdNukeProtocol")

    verbose = true
    classpath "$rdLibDirectory/rider-model.jar"
    sources "$modelDir/rider"
    hashFolder = 'build/rdgen/rider'
    packages = "model.rider"

    generator {
        language = "kotlin"
        transform = "asis"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "com.jetbrains.rider.model"
        directory = "$ktOutput"
    }

    generator {
        language = "csharp"
        transform = "reversed"
        root = "com.jetbrains.rider.model.nova.ide.IdeRoot"
        namespace = "JetBrains.Rider.Model"
        directory = "$csOutput"
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileKotlin {
    kotlinOptions { jvmTarget = "1.8" }
}

intellij {
    type = 'RD'
    // Download a version of Rider to compile and run with. Either set `version` to
    // 'LATEST-TRUNK-SNAPSHOT' or 'LATEST-EAP-SNAPSHOT' or a known version.
    // This will download from www.jetbrains.com/intellij-repository/snapshots or
    // www.jetbrains.com/intellij-repository/releases, respectively.
    version = "2018.2-SNAPSHOT"
    // Sources aren't available for Rider
    downloadSources = false
}

prepareSandbox {
    def dllFiles = [
        "../resharper/bin/Rider.Nuke/$BuildConfiguration/Rider.Nuke.dll",
        "../resharper/bin/Rider.Nuke/$BuildConfiguration/Rider.Nuke.pdb",
        "../resharper/ReSharper.Nuke.DotSettings"
    ]

    dllFiles.forEach({ f ->
        def file = file(f)
        if (file.name.endsWith(".DotSettings"))
            from(file, { into "$intellij.pluginName/dotnet/Extensions/ReSharper.Nuke/settings" })
        else
            from(file, { into "$intellij.pluginName/dotnet" })
    })

    doLast {
        dllFiles.forEach({ f ->
            def file = file(f)
            if (!file.exists()) throw new RuntimeException("File $file does not exist")
        })
    }
}